
// #journal-settings
akka.persistence.dynamodb {
  journal {
    class = "akka.persistence.dynamodb.journal.DynamoDBJournal"

    # name of the table to use for events
    table = "event_journal"

    # Set this to off to disable publishing of events as Akka messages to running
    # eventsBySlices queries.
    # Tradeoff is more CPU and network resources that are used. The events
    # must still be retrieved from the database, but at a lower polling frequency,
    # because delivery of published messages are not guaranteed.
    # When this feature is enabled it will measure the throughput and automatically
    # disable/enable if the throughput exceeds the configured threshold. See
    # publish-events-dynamic configuration.
    publish-events = on

    # When publish-events is enabled it will measure the throughput and automatically
    # disable/enable if the throughput exceeds the configured threshold.
    # This configuration cannot be defined per journal, but is global for the ActorSystem.
    publish-events-dynamic {
      # If exponentially weighted moving average of measured throughput exceeds this
      # threshold publishing of events is disabled. It is enabled again when lower than
      # the threshold.
      throughput-threshold = 400
      # The interval of the throughput measurements.
      throughput-collect-interval = 10 seconds
    }

    # Group the slices for an entity type into this number of topics. Most efficient is to use
    # the same number as number of projection instances. If configured to less than the number of
    # projection instances the overhead is that events will be sent more than once and discarded
    # on the destination side. If configured to more than the number of projection instances
    # the events will only be sent once but there is a risk of exceeding the limits of number
    # of topics that PubSub can handle (e.g. OversizedPayloadException).
    # Must be between 1 and 1024 and a whole number divisor of 1024 (number of slices).
    # This configuration can be changed in a rolling update, but there might be some events
    # that are not delivered via the pub-sub path and instead delivered later by the queries.
    # This configuration cannot be defined per journal, but is global for the ActorSystem.
    publish-events-number-of-topics = 128

    # replay filter not needed for this plugin
    replay-filter.mode = off

  }
}
// #journal-settings

// #snapshot-settings
akka.persistence.dynamodb {
  snapshot {
    class = "akka.persistence.dynamodb.snapshot.DynamoDBSnapshotStore"

    # name of the table to use for snapshots
    table = "snapshot"

    # Enables an optimization in Akka for avoiding snapshot deletes in retention.
    only-one-snapshot = true
  }
}
// #snapshot-settings

// #query-settings
akka.persistence.dynamodb {
  query {
    class = "akka.persistence.dynamodb.query.DynamoDBReadJournalProvider"

    # When live queries return no results or <= 10% of buffer-size, the next query
    # to db will be delayed for this duration.
    # When the number of rows from previous query is >= 90% of buffer-size, the next
    # query will be emitted immediately.
    # Otherwise, between 10% - 90% of buffer-size, the next query will be delayed
    # for half of this duration.
    refresh-interval = 3s

    # Live queries read events up to this duration from the current time.
    behind-current-time = 100 millis

    backtracking {
      enabled = on
      # Backtracking queries will look back for this amount of time. It should
      # not be larger than the akka.projection.dynamodb.offset-store.time-window.
      window = 2 minutes
      # Backtracking queries read events up to this duration from the current time.
      behind-current-time = 10 seconds
    }

    # In-memory buffer holding events when reading from DynamoDB.
    buffer-size = 100

    # When journal publish-events is enabled a best effort deduplication can be enabled by setting
    # this property to the size of the deduplication buffer in the `eventsBySlices` query.
    # It keeps track of this number of entries and 5000 is recommended capacity. The drawback
    # of enabling this is that when the sequence numbers received via publish-events are out of sync
    # after some error scenarios it will take longer to receive those events, since it will rely on
    # the backtracking queries.
    deduplicate-capacity = 0

    # Settings for `eventsBySlicesStartingFromSnapshots` and `currentEventsBySlicesStartingFromSnapshots`.
    start-from-snapshot {
      # Enable if `eventsBySlicesStartingFromSnapshots` or `currentEventsBySlicesStartingFromSnapshots` are used.
      # This adds some small overhead when storing snapshots because the timestamp and tags of the corresponding event
      # are retrieved when storing each snapshot.
      enabled = false
    }
  }
}
// #query-settings

// #cleanup-settings
akka.persistence.dynamodb {
  # Cleanup tool settings.
  cleanup {
    # Log progress after this number of delete operations. Can be set to 1 to log progress of each operation.
    log-progress-every = 100
  }
}
// #cleanup-settings

// #time-to-live-settings
akka.persistence.dynamodb {
  # Time to Live (TTL) settings
  time-to-live {
    event-sourced-defaults {
      # Whether to check the expiry of events or snapshots and treat as already deleted when replaying.
      # This enforces expiration before DynamoDB Time to Live may have actually deleted the data.
      check-expiry = on

      # Set a time-to-live duration in place of deletes when events or snapshots are deleted by an entity
      # (such as when events are deleted on snapshot). Set to a duration to expire items after this time
      # following the triggered deletion. Disabled when set to `off` or `none`.
      use-time-to-live-for-deletes = off

      # Set a time-to-live duration on all events when they are originally created and stored.
      # Disabled when set to `off` or `none`.
      event-time-to-live = off

      # Set a time-to-live duration on all snapshots when they are originally created and stored.
      # Disabled when set to `off` or `none`.
      snapshot-time-to-live = off
    }

    # Time-to-live settings per entity type for event sourced entities.
    # See `event-sourced-defaults` for possible settings and default values.
    # Prefix matching is supported by using * at the end of an entity type key.
    event-sourced-entities {
      # Example configuration:
      # "some-entity-type" {
      #   use-time-to-live-for-deletes = 7 days
      # }
      # "entity-type-*" {
      #   event-time-to-live = 3 days
      #   snapshot-time-to-live = 5 days
      # }
    }
  }
}
// #time-to-live-settings

// #client-settings
akka.persistence.dynamodb {
  client {
    # The amount of time to allow the client to complete the execution of an API call, including retry attempts.
    # It should be set lower than the circuit-breaker.call-timeout.
    call-timeout = 9 seconds

    # The amount of time to wait for each API request to complete before giving up and timing out.
    # Can be used together with `call-timeout` to enforce both a timeout on each individual HTTP request
    # (i.e. each retry) and the total time spent on all requests across retries (i.e. the 'API call' time).
    # Disabled when set to `off` or `none`.
    call-attempt-timeout = none

    # HTTP client settings.
    http {
      # Maximum number of allowed concurrent requests.
      max-concurrency = 50

      # The maximum number of pending acquires allowed.
      max-pending-connection-acquires = 10000

      # The amount of time to wait for a read before an exception is thrown.
      read-timeout = 30 seconds

      # The amount of time to wait for a write before an exception is thrown.
      write-timeout = 30 seconds

      # The amount of time to wait when initially establishing a connection before giving up and timing out.
      connection-timeout = 2 seconds

      # The amount of time to wait when acquiring a connection from the pool before giving up and timing out.
      connection-acquisition-timeout = 10 seconds

      # The maximum amount of time that a connection should be allowed to remain open, regardless of usage frequency.
      # Zero indicates an infinite amount of time.
      connection-time-to-live = 0

      # Configure whether idle connections in the connection pool should be closed.
      # Set `connection-max-idle-time` for amount of idle time that should be allowed.
      use-idle-connection-reaper = true

      # The maximum amount of time that a connection should be allowed to remain open while idle.
      # Enabled with `use-idle-connection-reaper`.
      connection-max-idle-time = 60 seconds

      # Configure the maximum amount of time that a TLS handshake is allowed to take.
      tls-negotiation-timeout = 5 seconds

      # Whether to enable or disable TCP KeepAlive.
      tcp-keep-alive = false
    }

    # Retry policy settings.
    retry-policy {
      # Whether retries are enabled.
      enabled = on

      # Set the retry mode. Can be `default`, `legacy`, `standard`, or `adaptive`.
      # See the documentation for the AWS SDK for Java for details.
      # As of AWS SDK 2.25.59, the default for DynamoDB is `legacy`, which is not recommended
      retry-mode = standard

      # Maximum number of times that a single request should be retried, assuming it fails for a retryable error.
      # Can be `default` for the default number of retries for the `retry-mode`, or override with a specific number.
      num-retries = default
    }

    # Request compression settings.
    compression {
      # Whether request compression is enabled.
      enabled = on

      # Minimum compression threshold, inclusive, in bytes. A request whose size is less than the threshold
      # will not be compressed. The value must be non-negative and no greater than 10 MiB (10,485,760 B).
      threshold = 10 KiB
    }

    # Configure the region of the DynamoDB instance.
    #
    # If this setting is not specified, then the default region lookup for the DynamoDB client will be used:
    #   - system property - `aws.region`
    #   - environment variable - `AWS_REGION`
    #   - credentials and config files at the default locations (~/.aws/credentials, ~/.aws/config)
    #   - if running in EC2, check the EC2 metadata service
    region = ""

    # Configuration for testing with DynamoDB local.
    # When enabled, will automatically set the endpoint, an arbitrary region, and dummy credentials.
    local {
      # Enable client for testing with DynamoDB local.
      enabled = false

      # Host for DynamoDB local endpoint.
      host = "localhost"

      # Port for DynamoDB local endpoint.
      port = 8000
    }
  }
}
// #client-settings
