
// #journal-settings
akka.persistence.dynamodb {
  journal {
    class = "akka.persistence.dynamodb.journal.DynamoDBJournal"

    # name of the table to use for events
    table = "event_journal"

    # Set this to off to disable publishing of events as Akka messages to running
    # eventsBySlices queries.
    # Tradeoff is more CPU and network resources that are used. The events
    # must still be retrieved from the database, but at a lower polling frequency,
    # because delivery of published messages are not guaranteed.
    # When this feature is enabled it will measure the throughput and automatically
    # disable/enable if the throughput exceeds the configured threshold. See
    # publish-events-dynamic configuration.
    publish-events = on

    # When publish-events is enabled it will measure the throughput and automatically
    # disable/enable if the throughput exceeds the configured threshold.
    # This configuration cannot be defined per journal, but is global for the ActorSystem.
    publish-events-dynamic {
      # If exponentially weighted moving average of measured throughput exceeds this
      # threshold publishing of events is disabled. It is enabled again when lower than
      # the threshold.
      throughput-threshold = 400
      # The interval of the throughput measurements.
      throughput-collect-interval = 10 seconds
    }

    # Group the slices for an entity type into this number of topics. Most efficient is to use
    # the same number as number of projection instances. If configured to less than the number of
    # projection instances the overhead is that events will be sent more than once and discarded
    # on the destination side. If configured to more than the number of projection instances
    # the events will only be sent once but there is a risk of exceeding the limits of number
    # of topics that PubSub can handle (e.g. OversizedPayloadException).
    # Must be between 1 and 1024 and a whole number divisor of 1024 (number of slices).
    # This configuration can be changed in a rolling update, but there might be some events
    # that are not delivered via the pub-sub path and instead delivered later by the queries.
    # This configuration cannot be defined per journal, but is global for the ActorSystem.
    publish-events-number-of-topics = 128

    # replay filter not needed for this plugin
    replay-filter.mode = off

  }
}
// #journal-settings

// #snapshot-settings
akka.persistence.dynamodb {
  snapshot {
    class = "akka.persistence.dynamodb.snapshot.DynamoDBSnapshotStore"

    # name of the table to use for snapshots
    table = "snapshot"

    # Enables an optimization in Akka for avoiding snapshot deletes in retention.
    only-one-snapshot = true
  }
}
// #snapshot-settings

// #query-settings
akka.persistence.dynamodb {
  query {
    class = "akka.persistence.dynamodb.query.DynamoDBReadJournalProvider"

    # When live queries return no results or <= 10% of buffer-size, the next query
    # to db will be delayed for this duration.
    # When the number of rows from previous query is >= 90% of buffer-size, the next
    # query will be emitted immediately.
    # Otherwise, between 10% - 90% of buffer-size, the next query will be delayed
    # for half of this duration.
    refresh-interval = 3s

    # Live queries read events up to this duration from the current time.
    behind-current-time = 100 millis

    backtracking {
      enabled = on
      # Backtracking queries will look back for this amount of time. It should
      # not be larger than the akka.projection.dynamodb.offset-store.time-window.
      window = 2 minutes
      # Backtracking queries read events up to this duration from the current time.
      behind-current-time = 10 seconds
    }

    # In-memory buffer holding events when reading from DynamoDB.
    buffer-size = 100

    # When journal publish-events is enabled a best effort deduplication can be enabled by setting
    # this property to the size of the deduplication buffer in the `eventsBySlices` query.
    # It keeps track of this number of entries and 5000 is recommended capacity. The drawback
    # of enabling this is that when the sequence numbers received via publish-events are out of sync
    # after some error scenarios it will take longer to receive those events, since it will rely on
    # the backtracking queries.
    deduplicate-capacity = 0
  }
}
// #query-settings

// #client-settings
akka.persistence.dynamodb {
  client {
    # The amount of time to allow the client to complete the execution of an API call, including retry attempts.
    # It should be set lower than the circuit-breaker.call-timeout.
    call-timeout = 9 seconds

    # Configure the region of the DynamoDB instance.
    #
    # If this setting is not specified, then the default region lookup for the DynamoDB client will be used:
    #   - system property - `aws.region`
    #   - environment variable - `AWS_REGION`
    #   - credentials and config files at the default locations (~/.aws/credentials, ~/.aws/config)
    #   - if running in EC2, check the EC2 metadata service
    region = ""

    # Configuration for testing with DynamoDB local.
    # When enabled, will automatically set the endpoint, an arbitrary region, and dummy credentials.
    local {
      # Enable client for testing with DynamoDB local.
      enabled = false

      # Host for DynamoDB local endpoint.
      host = "localhost"

      # Port for DynamoDB local endpoint.
      port = 8000
    }
  }
}
// #client-settings
